<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ui="clr-namespace:Gizmo.WPF;assembly=Gizmo.WPF"
                    xmlns:local="clr-namespace:Gizmo.NodeFrameworkUI">
    
    <ui:RoundedCornerConverter x:Key="RoundedCornerConverter" />

    <ControlTemplate x:Key="IconOnlyBoxTemplate" TargetType="{x:Type local:NodeToolboxItem}" >
        <Grid Height="40" Width="40" Cursor="Hand" Background="Transparent" ToolTip="{TemplateBinding NodeName}" ToolTipService.InitialShowDelay="2000">
            <Border x:Name="PART_Background" CornerRadius="0,8,0,8" Background="{TemplateBinding Background}" BorderThickness="0" BorderBrush="Transparent">
                <Border.Effect>
                    <DropShadowEffect RenderingBias="Performance" Color="{DynamicResource {ComponentResourceKey ui:UITheme, ShadowColor}}" BlurRadius="2" Opacity="1" ShadowDepth="0"/>
                </Border.Effect>
            </Border>
            <Border x:Name="PART_Border" CornerRadius="0,8,0,8" Background="Transparent" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" />
            <Path x:Name="PART_Icon" Data="{TemplateBinding Content}" Width="32" Height="32" VerticalAlignment="Center" HorizontalAlignment="Center" Fill="{TemplateBinding Foreground}">
                <Path.Effect>
                    <DropShadowEffect RenderingBias="Performance" Color="{DynamicResource {ComponentResourceKey ui:UITheme, ShadowColor}}" BlurRadius="2" Opacity="1" ShadowDepth="0"/>
                </Path.Effect>
            </Path>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="PART_Icon" Property="Fill" Value="{DynamicResource {ComponentResourceKey ui:UITheme, KeySelectBrush}}" />
                <Setter TargetName="PART_Border" Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey local:UINodeTheme, NodeBorderHighlightBrush}}" />
                <Setter TargetName="PART_Border" Property="BorderThickness" Value="1" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type local:NodeToolboxItem}">
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey ui:UITheme, MenuBackgroundBrush}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ui:UITheme, MenuBorderBrush}}" />
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey ui:UITheme, WindowForegroundBrush}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="7" />
        <Setter Property="Margin" Value="0,0,4,4" />
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="ToolTip" Value="{Binding ToolTip}"/>
        <Setter Property="Template" Value="{StaticResource IconOnlyBoxTemplate}" />
    </Style>
    
    <Style x:Key="NodeToolboxToggleButton" TargetType="{x:Type ui:UIToggleButton}">
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey ui:UITheme, ControlBackgroundBrush}}" />
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey ui:UITheme, WindowForegroundBrush}}" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ui:UIToggleButton}">
                    <Grid>
                        <Border x:Name="PART_Background" CornerRadius="{TemplateBinding CornerRadius}" Background="{TemplateBinding Background}" BorderThickness="0" BorderBrush="Transparent"/>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey ui:UITheme, ControlSelectBorderBrush}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
    <Style TargetType="{x:Type local:NodeToolbox}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ui:UITheme, ControlBorderBrush}}" />
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey ui:UITheme, WindowForegroundBrush}}" />
        <Setter Property="CornerRadius" Value="0" />
        <Setter Property="MinWidth" Value="220" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="4" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel IsItemsHost="True"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:NodeToolbox}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Name="ContentRow" Height="0" />
                            </Grid.RowDefinitions>
                            <ui:UIToggleButton x:Name="PART_ExpandToggleButton"
                                Style="{StaticResource NodeToolboxToggleButton}"
                                Background="{TemplateBinding Background}"
                                Height="24"
                                HorizontalAlignment="Stretch" 
                                HorizontalContentAlignment="Left"
                                CornerRadius="{TemplateBinding CornerRadius, Converter={StaticResource RoundedCornerConverter},ConverterParameter=top}"
                                IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <ui:UIToggleButton.Content>
                                    <StackPanel Orientation="Horizontal">
                                        <Path Margin="5" x:Name="ExpandPath" Data="M0,0 L0,6 L6,0 z" VerticalAlignment="Center" Fill="{Binding ElementName=PART_ExpandToggleButton, Path=Foreground}" Stroke="{Binding ElementName=PART_ExpandToggleButton, Path=Foreground}">
                                            <Path.RenderTransform>
                                                <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                            </Path.RenderTransform>
                                        </Path>
                                        <TextBlock Text="{TemplateBinding Category}" Margin="5" TextAlignment="Left"/>
                                    </StackPanel>
                                </ui:UIToggleButton.Content>
                            </ui:UIToggleButton>
                            <ItemsPresenter Grid.Row="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ContentRow" Property="Height" Value="{Binding ElementName=Content, Path=DesiredHeight}" />
                            <Setter Property="RenderTransform" TargetName="ExpandPath">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>